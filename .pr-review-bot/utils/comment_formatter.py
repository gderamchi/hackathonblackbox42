"""
Comment formatter for GitHub review comments.
"""

import logging
from typing import Dict, Any, List

logger = logging.getLogger(__name__)


class CommentFormatter:
    """Formats review comments for GitHub."""

    def __init__(self):
        """Initialize comment formatter."""
        self.severity_emojis = {
            "critical": "🚨",
            "high": "⚠️",
            "medium": "⚡",
            "low": "ℹ️",
            "info": "💡",
        }

        self.type_emojis = {
            "bug": "🐛",
            "security": "🔒",
            "quality": "📝",
            "performance": "⚡",
        }

    def format_issue(self, issue: Dict[str, Any]) -> str:
        """
        Format an issue as a GitHub comment.

        Args:
            issue: Issue dictionary with details

        Returns:
            Formatted comment string
        """
        severity = issue.get("severity", "info")
        issue_type = issue.get("type", "quality")
        message = issue.get("message", "Issue detected")
        suggestion = issue.get("suggestion", "")
        code_snippet = issue.get("code_snippet", "")
        doc_links = issue.get("doc_links", [])
        cwe = issue.get("cwe", "")

        # Build comment
        comment = f"{self.type_emojis.get(issue_type, '📝')} **{issue_type.title()}** "
        comment += f"{self.severity_emojis.get(severity, 'ℹ️')} *{severity.title()} Severity*\n\n"

        # Add message
        comment += f"{message}\n\n"

        # Add code snippet if available
        if code_snippet:
            comment += f"**Code:**\n```\n{code_snippet}\n```\n\n"

        # Add suggestion
        if suggestion:
            comment += f"**💡 Suggestion:**\n{suggestion}\n\n"

        # Add CWE reference for security issues
        if cwe and issue_type == "security":
            comment += f"**🔗 Reference:** [{cwe}](https://cwe.mitre.org/data/definitions/{cwe.split('-')[1]}.html)\n\n"

        # Add documentation links
        if doc_links:
            comment += self._format_doc_links(doc_links)

        # Add footer
        comment += "\n---\n*🤖 Generated by Blackbox AI PR Review Bot*"

        return comment

    def format_multiple_issues(
        self, issues: List[Dict[str, Any]], filename: str
    ) -> str:
        """
        Format multiple issues for a single file.

        Args:
            issues: List of issues
            filename: File name

        Returns:
            Formatted comment string
        """
        if not issues:
            return ""

        comment = f"## 📋 Review for `{filename}`\n\n"
        comment += f"Found {len(issues)} issue(s):\n\n"

        # Group by severity
        by_severity = {}
        for issue in issues:
            severity = issue.get("severity", "info")
            if severity not in by_severity:
                by_severity[severity] = []
            by_severity[severity].append(issue)

        # Display in severity order
        severity_order = ["critical", "high", "medium", "low", "info"]

        for severity in severity_order:
            if severity in by_severity:
                emoji = self.severity_emojis.get(severity, "ℹ️")
                comment += f"### {emoji} {severity.title()} Severity\n\n"

                for issue in by_severity[severity]:
                    line = issue.get("line", "N/A")
                    message = issue.get("message", "Issue detected")
                    issue_type = issue.get("type", "quality")
                    type_emoji = self.type_emojis.get(issue_type, "📝")

                    comment += f"- **Line {line}** {type_emoji} {message}\n"

                comment += "\n"

        comment += "---\n*🤖 Generated by Blackbox AI PR Review Bot*\n"

        return comment

    def format_summary_comment(
        self,
        total_files: int,
        total_issues: int,
        severity_breakdown: Dict[str, int],
        top_issues: List[Dict[str, Any]],
    ) -> str:
        """
        Format a summary comment for the entire PR.

        Args:
            total_files: Total number of files reviewed
            total_issues: Total number of issues found
            severity_breakdown: Dictionary of severity counts
            top_issues: List of most important issues

        Returns:
            Formatted summary comment
        """
        comment = "## 🤖 Blackbox AI PR Review Summary\n\n"

        # Overall status
        if severity_breakdown.get("critical", 0) > 0:
            comment += "**Status:** 🚨 Critical issues found - review required\n\n"
        elif severity_breakdown.get("high", 0) > 0:
            comment += "**Status:** ⚠️ High priority issues found\n\n"
        elif total_issues > 0:
            comment += "**Status:** ⚡ Minor issues found\n\n"
        else:
            comment += "**Status:** ✅ No issues found\n\n"

        # Statistics
        comment += "### 📊 Review Statistics\n\n"
        comment += f"- Files reviewed: {total_files}\n"
        comment += f"- Total issues: {total_issues}\n\n"

        # Severity breakdown
        if total_issues > 0:
            comment += "**By Severity:**\n"
            for severity in ["critical", "high", "medium", "low", "info"]:
                count = severity_breakdown.get(severity, 0)
                if count > 0:
                    emoji = self.severity_emojis.get(severity, "ℹ️")
                    comment += f"- {emoji} {severity.title()}: {count}\n"
            comment += "\n"

        # Top issues
        if top_issues:
            comment += "### ⚠️ Top Issues to Address\n\n"
            for i, issue in enumerate(top_issues[:5], 1):
                severity = issue.get("severity", "info")
                emoji = self.severity_emojis.get(severity, "ℹ️")
                message = issue.get("message", "Issue detected")
                file = issue.get("file", "unknown")
                line = issue.get("line", "N/A")

                comment += f"{i}. {emoji} **{file}:{line}** - {message}\n"
            comment += "\n"

        # Footer
        comment += "---\n"
        comment += "*💡 Check inline comments for detailed suggestions and fixes*\n\n"
        comment += "*🤖 Generated by Blackbox AI PR Review Bot*\n"

        return comment

    def _format_doc_links(self, doc_links: List[Dict[str, str]]) -> str:
        """Format documentation links."""
        if not doc_links:
            return ""

        formatted = "**📚 Related Documentation:**\n"
        for doc in doc_links[:3]:  # Limit to 3 links
            title = doc.get("title", "Documentation")
            url = doc.get("url", "#")
            description = doc.get("description", "")

            formatted += f"- [{title}]({url})"
            if description:
                formatted += f" - {description}"
            formatted += "\n"

        formatted += "\n"
        return formatted

    def format_approval_comment(self) -> str:
        """Format an approval comment."""
        return """## ✅ Approved by Blackbox AI

This PR looks good! No critical issues were found.

**Review Summary:**
- Code quality: Good
- Security: No vulnerabilities detected
- Best practices: Followed

Great work! 🎉

---
*🤖 Generated by Blackbox AI PR Review Bot*
"""

    def format_request_changes_comment(
        self, critical_issues: List[Dict[str, Any]]
    ) -> str:
        """Format a request changes comment."""
        comment = "## ⚠️ Changes Requested by Blackbox AI\n\n"
        comment += (
            "Critical issues were found that should be addressed before merging.\n\n"
        )

        comment += "### 🚨 Critical Issues:\n\n"
        for i, issue in enumerate(critical_issues[:10], 1):
            message = issue.get("message", "Issue detected")
            file = issue.get("file", "unknown")
            line = issue.get("line", "N/A")

            comment += f"{i}. **{file}:{line}** - {message}\n"

        comment += "\n---\n"
        comment += "*Please address these issues and update the PR.*\n\n"
        comment += "*🤖 Generated by Blackbox AI PR Review Bot*\n"

        return comment

    def truncate_comment(self, comment: str, max_length: int = 65536) -> str:
        """
        Truncate comment if it exceeds GitHub's limit.

        Args:
            comment: Comment text
            max_length: Maximum length (GitHub limit is 65536)

        Returns:
            Truncated comment
        """
        if len(comment) <= max_length:
            return comment

        truncated = comment[: max_length - 200]
        truncated += "\n\n---\n\n"
        truncated += (
            "*⚠️ Comment truncated due to length. See full analysis in artifacts.*\n"
        )
        truncated += "*🤖 Generated by Blackbox AI PR Review Bot*\n"

        return truncated
