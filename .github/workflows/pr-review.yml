# ðŸ¤– PR Review Bot - Reusable Workflow
# Use this workflow in any repository to enable AI-powered code reviews

name: PR Review Bot

on:
  workflow_call:
    inputs:
      severity-threshold:
        description: 'Minimum severity level (info/low/medium/high/critical)'
        required: false
        type: string
        default: 'low'
      max-comments:
        description: 'Maximum number of comments per PR'
        required: false
        type: number
        default: 50
    secrets:
      BLACKBOX_API_KEY:
        description: 'Blackbox API key for code analysis'
        required: true
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  review:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout PR Review Bot
        uses: actions/checkout@v4
        with:
          repository: gderamchi/hackathonblackbox42
          path: .pr-review-bot
          
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          path: repo
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: '.pr-review-bot/requirements.txt'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .pr-review-bot/requirements.txt
          
      - name: Create config if not exists
        run: |
          if [ ! -f repo/.pr-review-bot.json ]; then
            cat > repo/.pr-review-bot.json << EOF
          {
            "enabled": true,
            "auto_comment": true,
            "severity_threshold": "${{ inputs.severity-threshold || 'low' }}",
            "ignore_patterns": ["*.md", "*.txt", "package-lock.json", "yarn.lock"],
            "features": {
              "bug_detection": true,
              "security_scan": true,
              "doc_linking": true,
              "summarization": true
            },
            "max_comments": ${{ inputs.max-comments || 50 }}
          }
          EOF
          fi
          
      - name: Run PR Review Bot
        env:
          BLACKBOX_API_KEY: ${{ secrets.BLACKBOX_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_NAME: ${{ github.repository }}
          BASE_SHA: ${{ github.event.pull_request.base.sha }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
          MIN_SEVERITY: ${{ inputs.severity-threshold || 'low' }}
          MAX_COMMENTS: ${{ inputs.max-comments || 50 }}
        working-directory: .pr-review-bot
        run: |
          # Copy repo files to analyze
          cp -r ../repo/* . 2>/dev/null || true
          
          # Run the bot
          python main.py
          
      - name: Upload analysis results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-review-results-${{ github.event.pull_request.number }}
          path: |
            .pr-review-bot/analysis-results.json
            .pr-review-bot/review-summary.md
          retention-days: 30
          
      - name: Comment on PR with summary
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summaryPath = '.pr-review-bot/review-summary.md';
            
            if (fs.existsSync(summaryPath)) {
              const summary = fs.readFileSync(summaryPath, 'utf8');
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
